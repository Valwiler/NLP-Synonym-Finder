    def build_array(self):
        word_count = len(self.word_to_index.keys())
        maximum = len(self.full_text)
        occurrence_array = np.zeros((word_count, word_count), dtype=int)
        for word_ind in range(self.window_size):
            self.add_word_occurence_to_coocurence_array(occurrence_array, self.full_text[word_ind],
                                                        self.slice_coocurent_words(0, word_ind,
                                                                                   word_ind + self.window_size))
        for word_ind in range(self.window_size, maximum - self.window_size):
            self.add_word_occurence_to_coocurence_array(occurrence_array, self.full_text[word_ind],
                                                        self.slice_coocurent_words(word_ind-self.window_size, word_ind,
                                                                                   word_ind + self.window_size))
        for word_ind in range(maximum - self.window_size, maximum):
            self.add_word_occurence_to_coocurence_array(occurrence_array, self.full_text[word_ind],
                                                        self.slice_coocurent_words(word_ind - self.window_size,
                                                                                   word_ind,
                                                                                   maximum))
        return occurrence_array

    def slice_coocurent_words(self, begining, middle,  end):
        return self.full_text[begining:middle] + self.full_text[middle+1:end+1]

    def add_word_occurence_to_coocurence_array(self, occurrence_array, current_word, coocurent_words):
        for word in coocurent_words:
            occurrence_array[self.word_to_index.get(current_word)][self.word_to_index.get(word)] += 1
